"use client";

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import AuthForm from "../components/AuthForm";
import { usePathname } from "next/navigation";
import AccountDropdown from "../components/AccountDropdown";
import { useRouter } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isLoggedIn, setIsLoggedIn] = useState<boolean | null>(null);
  const [showAccountDropdown, setShowAccountDropdown] = useState(false);
  const accountBtnRef = useRef<HTMLButtonElement>(null);
  const pathname = usePathname();
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    setIsLoggedIn(!!token);
  }, []);

  // Close dropdown when clicking outside
  useEffect(() => {
    if (!showAccountDropdown) return;
    function handleClick(e: MouseEvent) {
      if (
        accountBtnRef.current &&
        !accountBtnRef.current.contains(e.target as Node)
      ) {
        setShowAccountDropdown(false);
      }
    }
    document.addEventListener("click", handleClick);
    return () => document.removeEventListener("click", handleClick);
  }, [showAccountDropdown]);

  function handleLogout() {
    console.log("Logging out...");
    localStorage.removeItem("token");
    setShowAccountDropdown(false);
    setIsLoggedIn(false);
    router.push("/");
    router.refresh();
  }

  // If on /reset-password, just render children (the reset form)
  if (pathname === "/reset-password") {
    return (
      <html lang="en">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          {children}
        </body>
      </html>
    );
  }

  if (pathname === "/404" || pathname === "/not-found") {
    return (
      <html lang="en">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          {children}
        </body>
      </html>
    );
  }

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {isLoggedIn === null ? ( // ðŸ”¹ still loading auth check
          <div className="p-8 space-y-4">
            <div className="h-6 w-1/3 bg-gray-300 animate-pulse rounded"></div>
            <div className="h-4 w-2/3 bg-gray-200 animate-pulse rounded"></div>
            <div className="h-4 w-1/2 bg-gray-200 animate-pulse rounded"></div>
          </div>
        ) : isLoggedIn ? (
          <>
            {/* navbar */}
            <nav className="bg-gray-800 p-4 text-white">
              <div className="container mx-auto flex items-center justify-between">
                <Link href="/" className="text-xl font-bold">
                  SOCMED
                </Link>
                <div className="flex items-center gap-4">
                  <input
                    type="search"
                    placeholder="Search..."
                    className="w-64 p-2 rounded bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <Link href="/notifications" passHref>
                    <button
                      className="p-2 rounded-full hover:bg-gray-700 transition-colors"
                      aria-label="Notifications"
                      type="button"
                    >
                      <Image
                        className="dark:invert"
                        src="/notification-bell-1395-svgrepo-com.svg"
                        alt="Notifications"
                        width={24}
                        height={24}
                      />
                    </button>
                  </Link>
                  <div className="relative">
                    <button
                      ref={accountBtnRef}
                      className="p-2 rounded-full hover:bg-gray-700 transition-colors"
                      aria-label="Account"
                      type="button"
                      onClick={() => setShowAccountDropdown(v => !v)}
                    >
                      <Image
                        className="dark:invert"
                        src="/avatar-people-user-svgrepo-com.svg"
                        alt="Account"
                        width={30}
                        height={30}
                      />
                    </button>
                    {showAccountDropdown && (
                      <AccountDropdown
                        onLogout={handleLogout}
                        onClose={() => setShowAccountDropdown(false)}
                      />
                    )}
                  </div>
                </div>
              </div>
            </nav>
            {children}
          </>
        ) : (
          <AuthForm onSuccess={() => setIsLoggedIn(true)} />
        )}
      </body>
    </html>
  );
}